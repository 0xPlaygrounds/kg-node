directive @specifiedBy(url: String!) on SCALAR

input AttributeFilter {
  valueType: ValueType
}

"""Entity object"""
type Entity {
  """Entity ID"""
  id: String!

  """Entity name (if available)"""
  name: String

  """Entity description (if available)"""
  description: String

  """Entity name (if available)"""
  cover: String

  """Entity name (if available)"""
  blocks: [Entity!]!

  """
  The space ID of the entity (note: the same entity can exist in multiple spaces)
  """
  spaceId: String!
  createdAt: String!
  createdAtBlock: String!
  updatedAt: String!
  updatedAtBlock: String!

  """Types of the entity (which are entities themselves)"""
  types: [Entity!]!

  """Attributes of the entity"""
  attributes(filter: AttributeFilter): [Triple!]!

  """Relations outgoing from the entity"""
  relations(where: EntityRelationFilter): [Relation!]!
}

"""Filter the entities by attributes and their values and value types"""
input EntityAttributeFilter {
  attribute: String!
  value: String
  valueNot: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueType: ValueType
  valueTypeNot: ValueType
  valueTypeIn: [ValueType!]
  valueTypeNotIn: [ValueType!]
}

"""
Entity filter input object

```graphql
query {
    entities(where: {
        space_id: "BJqiLPcSgfF8FRxkFr76Uy",
        types_contain: ["XG26vy98XAA6cR6DosTALk", "XG26vy98XAA6cR6DosTALk"],
        attributes_contain: [
            {id: "XG26vy98XAA6cR6DosTALk", value: "value", value_type: TEXT},
        ]
    })
}
```
"""
input EntityFilter {
  id: String
  idNot: String
  idIn: [String!]
  idNotIn: [String!]

  """Exact match for the entity types"""
  types: [String!]
  typesNot: [String!]
  typesContains: [String!]
  typesNotContains: [String!]
  attributes: [EntityAttributeFilter!]
}

"""Filters the outgoing relations of the entity"""
input EntityRelationFilter {
  id: String
  idNot: String
  idIn: [String!]
  idNotIn: [String!]
  toId: String
  toIdNot: String
  toIdIn: [String!]
  toIdNotIn: [String!]
  relationType: String
  relationTypeNot: String
  relationTypeIn: [String!]
  relationTypeNotIn: [String!]

  """Filter the relations by the entity they point to"""
  to: EntityFilter
  attributes: [EntityAttributeFilter!]
}

type Options {
  format: String
  unit: String
  language: String
}

enum OrderDirection {
  ASC
  DESC
}

type Query {
  """Returns a single entity identified by its ID and space ID"""
  entity(id: String!, spaceId: String!): Entity

  """
  Returns multiple entities according to the provided space ID and filter
  """
  entities(spaceId: String!, orderBy: String, orderDirection: OrderDirection, where: EntityFilter): [Entity!]!

  """Returns a single relation identified by its ID and space ID"""
  relation(id: String!, spaceId: String!): Relation

  """
  Returns multiple relations according to the provided space ID and filter
  """
  relations(spaceId: String!, orderBy: String, orderDirection: OrderDirection, where: RelationFilter): [Relation!]!
}

"""
Relation object

Note: Relations are also entities, but they have a different structure in the database.
In other words, the Relation object is a "view" on a relation entity. All relations
can also be queried as entities.
"""
type Relation {
  """Relation ID"""
  id: String!

  """Relation name (if available)"""
  name: String
  createdAt: String!
  createdAtBlock: String!
  updatedAt: String!
  updatedAtBlock: String!

  """Attributes of the relation"""
  attributes: [Triple!]!

  """Relation type of the relation"""
  relationType: [Entity!]!

  """Entity from which the relation originates"""
  from: Entity!

  """Entity to which the relation points"""
  to: Entity!

  """Relations outgoing from the relation"""
  relations(spaceId: String!, where: EntityRelationFilter): [Relation!]!
}

"""Relation filter input object"""
input RelationFilter {
  """Filter the relations by their id"""
  id: String
  idNot: String
  idIn: [String!]
  idNotIn: [String!]

  """Filter the relations by their relation type"""
  relationType: String
  relationTypeNot: String
  relationTypeIn: [String!]
  relationTypeNotIn: [String!]

  """Filter the relations by the entity they point to"""
  to: EntityFilter

  """Filter the relations by the entity they point from"""
  from: EntityFilter

  """Filter the relations by their attributes"""
  attributes: [EntityAttributeFilter!]
}

type Triple {
  """Attribute ID of the triple"""
  attribute: String!

  """Value of the triple"""
  value: String!

  """Value type of the triple"""
  valueType: ValueType!

  """Options of the triple (if any)"""
  options: Options!

  """Name of the attribute (if available)"""
  name: String
}

enum ValueType {
  TEXT
  NUMBER
  CHECKBOX
  URL
  TIME
  POINT
}

